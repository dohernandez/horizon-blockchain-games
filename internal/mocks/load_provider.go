// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/dohernandez/horizon-blockchain-games/internal/entities"

	mock "github.com/stretchr/testify/mock"
)

// LoadProvider is an autogenerated mock type for the LoadProvider type
type LoadProvider struct {
	mock.Mock
}

type LoadProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *LoadProvider) EXPECT() *LoadProvider_Expecter {
	return &LoadProvider_Expecter{mock: &_m.Mock}
}

// Save provides a mock function with given fields: ctx, flatten
func (_m *LoadProvider) Save(ctx context.Context, flatten entities.Flatten) error {
	ret := _m.Called(ctx, flatten)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Flatten) error); ok {
		r0 = rf(ctx, flatten)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoadProvider_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type LoadProvider_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - flatten entities.Flatten
func (_e *LoadProvider_Expecter) Save(ctx interface{}, flatten interface{}) *LoadProvider_Save_Call {
	return &LoadProvider_Save_Call{Call: _e.mock.On("Save", ctx, flatten)}
}

func (_c *LoadProvider_Save_Call) Run(run func(ctx context.Context, flatten entities.Flatten)) *LoadProvider_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Flatten))
	})
	return _c
}

func (_c *LoadProvider_Save_Call) Return(_a0 error) *LoadProvider_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LoadProvider_Save_Call) RunAndReturn(run func(context.Context, entities.Flatten) error) *LoadProvider_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewLoadProvider creates a new instance of LoadProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoadProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoadProvider {
	mock := &LoadProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
