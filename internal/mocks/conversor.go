// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Conversor is an autogenerated mock type for the Conversor type
type Conversor struct {
	mock.Mock
}

type Conversor_Expecter struct {
	mock *mock.Mock
}

func (_m *Conversor) EXPECT() *Conversor_Expecter {
	return &Conversor_Expecter{mock: &_m.Mock}
}

// ConvertUSD provides a mock function with given fields: ctx, valueDecimal, symbol
func (_m *Conversor) ConvertUSD(ctx context.Context, valueDecimal float64, symbol string) (float64, error) {
	ret := _m.Called(ctx, valueDecimal, symbol)

	if len(ret) == 0 {
		panic("no return value specified for ConvertUSD")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, float64, string) (float64, error)); ok {
		return rf(ctx, valueDecimal, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, float64, string) float64); ok {
		r0 = rf(ctx, valueDecimal, symbol)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, float64, string) error); ok {
		r1 = rf(ctx, valueDecimal, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Conversor_ConvertUSD_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertUSD'
type Conversor_ConvertUSD_Call struct {
	*mock.Call
}

// ConvertUSD is a helper method to define mock.On call
//   - ctx context.Context
//   - valueDecimal float64
//   - symbol string
func (_e *Conversor_Expecter) ConvertUSD(ctx interface{}, valueDecimal interface{}, symbol interface{}) *Conversor_ConvertUSD_Call {
	return &Conversor_ConvertUSD_Call{Call: _e.mock.On("ConvertUSD", ctx, valueDecimal, symbol)}
}

func (_c *Conversor_ConvertUSD_Call) Run(run func(ctx context.Context, valueDecimal float64, symbol string)) *Conversor_ConvertUSD_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float64), args[2].(string))
	})
	return _c
}

func (_c *Conversor_ConvertUSD_Call) Return(_a0 float64, _a1 error) *Conversor_ConvertUSD_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Conversor_ConvertUSD_Call) RunAndReturn(run func(context.Context, float64, string) (float64, error)) *Conversor_ConvertUSD_Call {
	_c.Call.Return(run)
	return _c
}

// NewConversor creates a new instance of Conversor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConversor(t interface {
	mock.TestingT
	Cleanup(func())
}) *Conversor {
	mock := &Conversor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
