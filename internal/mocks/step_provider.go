// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// StepProvider is an autogenerated mock type for the StepProvider type
type StepProvider struct {
	mock.Mock
}

type StepProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *StepProvider) EXPECT() *StepProvider_Expecter {
	return &StepProvider_Expecter{mock: &_m.Mock}
}

// Load provides a mock function with given fields: ctx, step
func (_m *StepProvider) Load(ctx context.Context, step string) ([]byte, error) {
	ret := _m.Called(ctx, step)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(ctx, step)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, step)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, step)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StepProvider_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type StepProvider_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - ctx context.Context
//   - step string
func (_e *StepProvider_Expecter) Load(ctx interface{}, step interface{}) *StepProvider_Load_Call {
	return &StepProvider_Load_Call{Call: _e.mock.On("Load", ctx, step)}
}

func (_c *StepProvider_Load_Call) Run(run func(ctx context.Context, step string)) *StepProvider_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *StepProvider_Load_Call) Return(_a0 []byte, _a1 error) *StepProvider_Load_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StepProvider_Load_Call) RunAndReturn(run func(context.Context, string) ([]byte, error)) *StepProvider_Load_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, step, data
func (_m *StepProvider) Save(ctx context.Context, step string, data []byte) error {
	ret := _m.Called(ctx, step, data)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = rf(ctx, step, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StepProvider_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type StepProvider_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - step string
//   - data []byte
func (_e *StepProvider_Expecter) Save(ctx interface{}, step interface{}, data interface{}) *StepProvider_Save_Call {
	return &StepProvider_Save_Call{Call: _e.mock.On("Save", ctx, step, data)}
}

func (_c *StepProvider_Save_Call) Run(run func(ctx context.Context, step string, data []byte)) *StepProvider_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *StepProvider_Save_Call) Return(_a0 error) *StepProvider_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StepProvider_Save_Call) RunAndReturn(run func(context.Context, string, []byte) error) *StepProvider_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewStepProvider creates a new instance of StepProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStepProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *StepProvider {
	mock := &StepProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
