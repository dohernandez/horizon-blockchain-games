// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ExtractProvider is an autogenerated mock type for the ExtractProvider type
type ExtractProvider struct {
	mock.Mock
}

type ExtractProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *ExtractProvider) EXPECT() *ExtractProvider_Expecter {
	return &ExtractProvider_Expecter{mock: &_m.Mock}
}

// Load provides a mock function with given fields: ctx
func (_m *ExtractProvider) Load(ctx context.Context) ([]byte, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]byte, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []byte); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExtractProvider_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type ExtractProvider_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ExtractProvider_Expecter) Load(ctx interface{}) *ExtractProvider_Load_Call {
	return &ExtractProvider_Load_Call{Call: _e.mock.On("Load", ctx)}
}

func (_c *ExtractProvider_Load_Call) Run(run func(ctx context.Context)) *ExtractProvider_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ExtractProvider_Load_Call) Return(_a0 []byte, _a1 error) *ExtractProvider_Load_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExtractProvider_Load_Call) RunAndReturn(run func(context.Context) ([]byte, error)) *ExtractProvider_Load_Call {
	_c.Call.Return(run)
	return _c
}

// NewExtractProvider creates a new instance of ExtractProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExtractProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExtractProvider {
	mock := &ExtractProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
