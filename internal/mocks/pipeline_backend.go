// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	internal "github.com/dohernandez/horizon-blockchain-games/internal"
	mock "github.com/stretchr/testify/mock"
)

// PipelineBackend is an autogenerated mock type for the PipelineBackend type
type PipelineBackend struct {
	mock.Mock
}

type PipelineBackend_Expecter struct {
	mock *mock.Mock
}

func (_m *PipelineBackend) EXPECT() *PipelineBackend_Expecter {
	return &PipelineBackend_Expecter{mock: &_m.Mock}
}

// Conversor provides a mock function with given fields:
func (_m *PipelineBackend) Conversor() internal.Conversor {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Conversor")
	}

	var r0 internal.Conversor
	if rf, ok := ret.Get(0).(func() internal.Conversor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internal.Conversor)
		}
	}

	return r0
}

// PipelineBackend_Conversor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Conversor'
type PipelineBackend_Conversor_Call struct {
	*mock.Call
}

// Conversor is a helper method to define mock.On call
func (_e *PipelineBackend_Expecter) Conversor() *PipelineBackend_Conversor_Call {
	return &PipelineBackend_Conversor_Call{Call: _e.mock.On("Conversor")}
}

func (_c *PipelineBackend_Conversor_Call) Run(run func()) *PipelineBackend_Conversor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PipelineBackend_Conversor_Call) Return(_a0 internal.Conversor) *PipelineBackend_Conversor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PipelineBackend_Conversor_Call) RunAndReturn(run func() internal.Conversor) *PipelineBackend_Conversor_Call {
	_c.Call.Return(run)
	return _c
}

// ExtractProvider provides a mock function with given fields:
func (_m *PipelineBackend) ExtractProvider() internal.ExtractProvider {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ExtractProvider")
	}

	var r0 internal.ExtractProvider
	if rf, ok := ret.Get(0).(func() internal.ExtractProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internal.ExtractProvider)
		}
	}

	return r0
}

// PipelineBackend_ExtractProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractProvider'
type PipelineBackend_ExtractProvider_Call struct {
	*mock.Call
}

// ExtractProvider is a helper method to define mock.On call
func (_e *PipelineBackend_Expecter) ExtractProvider() *PipelineBackend_ExtractProvider_Call {
	return &PipelineBackend_ExtractProvider_Call{Call: _e.mock.On("ExtractProvider")}
}

func (_c *PipelineBackend_ExtractProvider_Call) Run(run func()) *PipelineBackend_ExtractProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PipelineBackend_ExtractProvider_Call) Return(_a0 internal.ExtractProvider) *PipelineBackend_ExtractProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PipelineBackend_ExtractProvider_Call) RunAndReturn(run func() internal.ExtractProvider) *PipelineBackend_ExtractProvider_Call {
	_c.Call.Return(run)
	return _c
}

// LoadProvider provides a mock function with given fields:
func (_m *PipelineBackend) LoadProvider() internal.LoadProvider {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadProvider")
	}

	var r0 internal.LoadProvider
	if rf, ok := ret.Get(0).(func() internal.LoadProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internal.LoadProvider)
		}
	}

	return r0
}

// PipelineBackend_LoadProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadProvider'
type PipelineBackend_LoadProvider_Call struct {
	*mock.Call
}

// LoadProvider is a helper method to define mock.On call
func (_e *PipelineBackend_Expecter) LoadProvider() *PipelineBackend_LoadProvider_Call {
	return &PipelineBackend_LoadProvider_Call{Call: _e.mock.On("LoadProvider")}
}

func (_c *PipelineBackend_LoadProvider_Call) Run(run func()) *PipelineBackend_LoadProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PipelineBackend_LoadProvider_Call) Return(_a0 internal.LoadProvider) *PipelineBackend_LoadProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PipelineBackend_LoadProvider_Call) RunAndReturn(run func() internal.LoadProvider) *PipelineBackend_LoadProvider_Call {
	_c.Call.Return(run)
	return _c
}

// StepProvider provides a mock function with given fields:
func (_m *PipelineBackend) StepProvider() internal.StepProvider {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StepProvider")
	}

	var r0 internal.StepProvider
	if rf, ok := ret.Get(0).(func() internal.StepProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internal.StepProvider)
		}
	}

	return r0
}

// PipelineBackend_StepProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StepProvider'
type PipelineBackend_StepProvider_Call struct {
	*mock.Call
}

// StepProvider is a helper method to define mock.On call
func (_e *PipelineBackend_Expecter) StepProvider() *PipelineBackend_StepProvider_Call {
	return &PipelineBackend_StepProvider_Call{Call: _e.mock.On("StepProvider")}
}

func (_c *PipelineBackend_StepProvider_Call) Run(run func()) *PipelineBackend_StepProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PipelineBackend_StepProvider_Call) Return(_a0 internal.StepProvider) *PipelineBackend_StepProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PipelineBackend_StepProvider_Call) RunAndReturn(run func() internal.StepProvider) *PipelineBackend_StepProvider_Call {
	_c.Call.Return(run)
	return _c
}

// NewPipelineBackend creates a new instance of PipelineBackend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPipelineBackend(t interface {
	mock.TestingT
	Cleanup(func())
}) *PipelineBackend {
	mock := &PipelineBackend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
